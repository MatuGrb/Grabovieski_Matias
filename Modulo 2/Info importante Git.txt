 -Repositorio
Espacio donde se almacenan y gestionan los archivos de un proyecto de software.
-permite a los desarrolladores colaborar en el código fuente
-mantener un historial de cambios
-coordinar el desarrollo

 -Flujo de trabajo
serie de pasos o actividades que un desarrollador sigue para completar 
una tarea específica o llevar a cabo un proceso en el desarrollo de software.

 -Repositorio Git
Controlado por el sistema de control de versiones.
 -Flujo de trabajo
Una ventaja de Git son sus capacidades de ramificación.
A diferencia de los sistemas de control de versiones centralizados,
las ramas de Git son baratas y fáciles de fusionar.
Esto facilita el flujo de trabajo de ramas.
Las ramas de función proporcionan un entorno aislado para cada cambio en el código base.
Cuando un desarrollador quiere empezar a trabajar en algo, sea grande o chico, crea una nueva rama.
Esto garantiza que la rama principal siempre contenga código de calidad para producción.
El uso de ramas de función no solo es más fiable que editar directamente el código de producción, 
sino que además proporciona ventajas organizativas.

 -Control de versiones
Práctica de rastrear y gestionar los cambios en el código de software.
son herramientas de software que ayudan a los equipos de software a
gestionar los cambios en el código fuente a lo largo del tiempo.

 -Sitios y Herramientas
Git
GitHub
GitHub Desktop

git init: creará un nuevo repositorio local GIT.
ejemplo: git init
	 git init [nombre del proyecto]

git config: puede ser usado para establecer una configuración específica de
usuario, como el email, nombre de usuario y tipo de formato, etc. 
ejemplo: git config --global user.email tuemail@ejemplo.com
	 git config --local  user.email tuemail@ejemplo.com

-global le dice a GIT que vas a usar ese correo electrónico para todos los repositorios locales

 -Comandos mas frecuentes
git clone: descarga una copia de un repositorio a nuestra computadora
ejemplo: git clone <Repository URL>
	 git clone nombredeusuario@host:/path/to/repository
//el ultimo es si el repositorio se encuentra en un servidor remoto

git add: agrega archivos modificados a área de trabajo local “staging”, 
la llamamos área de preparación
ejemplo: git add <archivo>

staging: espacios donde se van a formalizar los cambios a comitear

git commit: agrega los cambios del área “staging” al “repositorio local”
creará una instantánea de los cambios y la guardará en el directorio git
ten en cuenta que los cambios confirmados no llegarán al repositorio remoto
ejemplo: git commit -m "mensaje"

git push: sube los cambios desde “repositorio local” al “repositorio remoto”
se usa para enviar confirmaciones locales a la rama maestra o alguna rama a elección
ejemplo: git push
	 git push origin <master>
//el ultimo es para enviar a una rama que no sea la maestra

git pull: descarga cambios desde “repositorio remoto” al “repositorio local”
usado para recuperar cambios realizados por los demás desarrolladores,
fusiona todos los cambios que se han hecho en el repositorio remoto con el directorio de trabajo local
ejemplo: git pull

git status: nos muestra los archivos modificados en “staging” y “no staging” después del último commit
Es decir, muestra la lista de los archivos que se han cambiado junto con los archivos que están por ser preparados o confirmados.
ejemplo: git status

git merge: une cambios entre “repositorio local” y “working directory”
ejemplo: git merge <commit id>
	 git merge <branch-name>
//el ultimo se usa para fusionar una rama con una rama activa

git checkout: nos permite cambiarnos de rama del código
también crea ramas y te ayuda a navegar entre ellas
ejemplo: git checkout <branch-name>
	 command git checkout -b <branch-name>
//crea una nueva y automáticamente se cambia a ella